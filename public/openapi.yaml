openapi: 3.0.3
info:
  title: Rack REST API
  description: API documentation for the Rack REST API.
  version: 1.0.0
servers:
  - url: http://localhost:9292
    description: Local development server

paths:
  /api/users:
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get a list of all users
      description: Returns a list of all users in the system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      summary: Get a user by ID
      description: Returns a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products:
    post:
      summary: Create a product asynchronously
      description: Creates a new product in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      security:
        - bearerAuth: []
      responses:
        '202':
          description: Product creation task accepted
          headers:
            Location:
              description: URL to check the status of the task
              schema:
                type: string
                example: /api/tasks/123/status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks:
    get:
      summary: Get a list of all tasks
      description: Returns a list of all tasks in the system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tasks/{id}/status:
    get:
      summary: Get the status of a task
      description: Returns the status of a specific task by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Task status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '303':
          description: Task completed, redirect to resource
          headers:
            Location:
              description: URL of the created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: Name of the user
          example: Mariana
        email:
          type: string
          description: Email address of the user
          example: mariana@example.com
      required:
        - id
        - name
        - email

    UserCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: Mariana
        email:
          type: string
          description: Email address of the user
          example: mariana@example.com
        password:
          type: string
          description: Password for the user
          example: 1234
      required:
        - name
        - email
        - password

    UserLogin:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
          example: mariana@example.com
        password:
          type: string
          description: Password for the user
          example: 1234
      required:
        - email
        - password

    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product
          example: 1
        name:
          type: string
          description: Name of the product
          example: Product 1
      required:
        - id
        - name

    ProductCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the product
          example: Product 1
      required:
        - name

    Task:
      type: object
      properties:
        task_id:
          type: integer
          description: Unique identifier for the task
          example: 1
        task_action:
          type: string
          description: The action the task is performing
          example: create
        task_resource:
          type: string
          description: The resource type the task is associated with
          example: product
        task_status:
          type: string
          description: The current status of the task
          example: completed
        task_result:
          type: object
          description: The result of the task, if completed
          nullable: true
          properties:
            id:
              type: integer
              description: The ID of the created resource
              example: 123
      required:
        - task_id
        - task_action
        - task_resource
        - task_status

    AuthToken:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE3NDc4OTA3Njh9.jkfvc7YfnVKv2p8CGEPxdnJMVrppZYB8wWWi-dYZw_w

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Unauthorized

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT